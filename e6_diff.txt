diff --git a/Dockerfile b/Dockerfile
new file mode 100644
index 0000000..8344ee5
--- /dev/null
+++ b/Dockerfile
@@ -0,0 +1,51 @@
+FROM ubuntu:bionic
+
+WORKDIR /home
+
+ENV TZ=America/Sao_Paulo
+RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ
+
+RUN apt-get update && \
+    apt-get install -y \
+        bc \
+        bin86 \
+        build-essential \
+        g++-multilib \
+        gcc-multilib \
+        gdb \
+        gdb-multiarch \
+        make \
+        python3 \
+        python3-pip \
+        qemu \
+        qemu-kvm \
+        qemu-system-arm \
+        tar \
+        tcsh \
+        wget \
+        xterm && \
+    apt-get clean && \
+    rm -rf /var/lib/apt/lists/*
+
+RUN wget https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_amd64.deb && \
+    dpkg -i dumb-init_*.deb && \
+    rm dumb-init_*.deb
+
+RUN wget -q -O ia32.tar.gz https://epos.lisha.ufsc.br/dl469 && \
+    tar -zxvf ia32.tar.gz && \
+    mkdir -p /usr/local/ia32/ && \
+    mv gcc-7.2.0 /usr/local/ia32/ && \
+    rm -r ia32.tar.gz
+
+RUN wget -q -O arm.tar.gz https://epos.lisha.ufsc.br/dl468 && \
+    tar -zxvf arm.tar.gz && \
+    mkdir -p /usr/local/arm/ && \
+    mv gcc-7.2.0 /usr/local/arm/ && \
+    rm -r arm.tar.gz
+
+ENV PATH="${PATH}:/usr/local/arm/gcc-7.2.0/bin/"
+
+VOLUME /code
+WORKDIR /code
+
+ENTRYPOINT ["/usr/bin/dumb-init", "--"]
diff --git a/app/test_sched/makefile b/app/test_sched/makefile
new file mode 100644
index 0000000..8a6578a
--- /dev/null
+++ b/app/test_sched/makefile
@@ -0,0 +1,17 @@
+# EPOS Application Makefile
+
+include ../../makedefs
+
+all: install
+
+$(APPLICATION):	$(APPLICATION).o $(LIB)/*
+		$(ALD) $(ALDFLAGS) -o $@ $(APPLICATION).o
+
+$(APPLICATION).o: $(APPLICATION).cc $(SRC)
+		$(ACC) $(ACCFLAGS) -o $@ $<
+
+install: $(APPLICATION)
+		$(INSTALL) $(APPLICATION) $(IMG)
+
+clean:
+		$(CLEAN) *.o $(APPLICATION)
diff --git a/app/test_sched/test_sched.cc b/app/test_sched/test_sched.cc
new file mode 100644
index 0000000..bf103a8
--- /dev/null
+++ b/app/test_sched/test_sched.cc
@@ -0,0 +1,47 @@
+#include <utility/ostream.h>
+#include <real-time.h>
+
+using namespace EPOS;
+
+OStream cout;
+
+int func1() {
+	do {
+        cout << "Running func1" << endl;
+  } while (Periodic_Thread::wait_next());
+  return 0;
+}
+
+int func2() {
+	do {
+        cout << "Running func2" << endl;
+  } while (Periodic_Thread::wait_next());
+  return 0;
+}
+
+int func3() {
+	do {
+        cout << "Running func3" << endl;
+  } while (Periodic_Thread::wait_next());
+  return 0;
+}
+
+
+int main() {
+  // "The expected order is: func2 -> func1 -> func3"
+
+  Periodic_Thread * a = new Periodic_Thread(100000,  50000,  &func1);
+  Periodic_Thread * b = new Periodic_Thread(500000,  5000,   &func2);
+  Periodic_Thread * c = new Periodic_Thread(1000000, 500000, &func3);
+
+  a -> join();
+  b -> join();
+  c -> join();
+
+
+  delete a;
+  delete b;
+  delete c;
+
+  return 0;
+}
diff --git a/app/test_sched/test_sched_traits.h b/app/test_sched/test_sched_traits.h
new file mode 100644
index 0000000..ae39028
--- /dev/null
+++ b/app/test_sched/test_sched_traits.h
@@ -0,0 +1,158 @@
+#ifndef __traits_h
+#define __traits_h
+
+#include <system/config.h>
+
+__BEGIN_SYS
+
+// Build
+template<> struct Traits<Build>: public Traits_Tokens
+{
+    // Basic configuration
+    static const unsigned int MODE = LIBRARY;
+    static const unsigned int ARCHITECTURE = ARMv7;
+    static const unsigned int MACHINE = Cortex;
+    static const unsigned int MODEL = Raspberry_Pi3;
+    static const unsigned int CPUS = 1;
+    static const unsigned int NODES = 1; // (> 1 => NETWORKING)
+    static const unsigned int EXPECTED_SIMULATION_TIME = 60; // s (0 => not simulated)
+
+    // Default flags
+    static const bool enabled = true;
+    static const bool monitored = false;
+    static const bool debugged = false;
+    static const bool hysterically_debugged = false;
+
+    // Default aspects
+    typedef ALIST<> ASPECTS;
+};
+
+
+// Utilities
+template<> struct Traits<Debug>: public Traits<Build>
+{
+    static const bool error   = true;
+    static const bool warning = false;
+    static const bool info    = false;
+    static const bool trace   = true;
+};
+
+template<> struct Traits<Lists>: public Traits<Build>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+template<> struct Traits<Spin>: public Traits<Build>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+template<> struct Traits<Heaps>: public Traits<Build>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+template<> struct Traits<Observers>: public Traits<Build>
+{
+    // Some observed objects are created before initializing the Display
+    // Enabling debug may cause trouble in some Machines
+    static const bool debugged = false;
+};
+
+
+// System Parts (mostly to fine control debugging)
+template<> struct Traits<Boot>: public Traits<Build>
+{
+};
+
+template<> struct Traits<Setup>: public Traits<Build>
+{
+};
+
+template<> struct Traits<Init>: public Traits<Build>
+{
+};
+
+template<> struct Traits<Framework>: public Traits<Build>
+{
+};
+
+template<> struct Traits<Aspect>: public Traits<Build>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+
+__END_SYS
+
+// Mediators
+#include __ARCHITECTURE_TRAITS_H
+#include __MACHINE_TRAITS_H
+
+__BEGIN_SYS
+
+
+// API Components
+template<> struct Traits<Application>: public Traits<Build>
+{
+    static const unsigned int STACK_SIZE = Traits<Machine>::STACK_SIZE;
+    static const unsigned int HEAP_SIZE = Traits<Machine>::HEAP_SIZE;
+    static const unsigned int MAX_THREADS = Traits<Machine>::MAX_THREADS;
+};
+
+template<> struct Traits<System>: public Traits<Build>
+{
+    static const unsigned int mode = Traits<Build>::MODE;
+    static const bool multithread = (Traits<Build>::CPUS > 1) || (Traits<Application>::MAX_THREADS > 1);
+    static const bool multitask = (mode != Traits<Build>::LIBRARY);
+    static const bool multicore = (Traits<Build>::CPUS > 1) && multithread;
+    static const bool multiheap = multitask || Traits<Scratchpad>::enabled;
+
+    static const unsigned long LIFE_SPAN = 1 * YEAR; // s
+    static const unsigned int DUTY_CYCLE = 1000000; // ppm
+
+    static const bool reboot = true;
+
+    static const unsigned int STACK_SIZE = Traits<Machine>::STACK_SIZE;
+    static const unsigned int HEAP_SIZE = (Traits<Application>::MAX_THREADS + 1) * Traits<Application>::STACK_SIZE;
+};
+
+template<> struct Traits<Task>: public Traits<Build>
+{
+    static const bool enabled = Traits<System>::multitask;
+};
+
+template<> struct Traits<Thread>: public Traits<Build>
+{
+    static const bool enabled = Traits<System>::multithread;
+    static const bool smp = Traits<System>::multicore;
+    static const bool trace_idle = hysterically_debugged;
+    static const bool simulate_capacity = false;
+
+    typedef RR Criterion;
+    static const unsigned int QUANTUM = 10000; // us
+};
+
+template<> struct Traits<Scheduler<Thread>>: public Traits<Build>
+{
+    static const bool debugged = Traits<Thread>::trace_idle || hysterically_debugged;
+};
+
+template<> struct Traits<Synchronizer>: public Traits<Build>
+{
+    static const bool enabled = Traits<System>::multithread;
+};
+
+template<> struct Traits<Alarm>: public Traits<Build>
+{
+    static const bool visible = hysterically_debugged;
+};
+
+template<> struct Traits<DM>: public Traits<Build>
+{
+    static const bool debugged = true;
+};
+
+__END_SYS
+
+#endif
diff --git a/app/teste_heap/makefile b/app/teste_heap/makefile
new file mode 100644
index 0000000..8a6578a
--- /dev/null
+++ b/app/teste_heap/makefile
@@ -0,0 +1,17 @@
+# EPOS Application Makefile
+
+include ../../makedefs
+
+all: install
+
+$(APPLICATION):	$(APPLICATION).o $(LIB)/*
+		$(ALD) $(ALDFLAGS) -o $@ $(APPLICATION).o
+
+$(APPLICATION).o: $(APPLICATION).cc $(SRC)
+		$(ACC) $(ACCFLAGS) -o $@ $<
+
+install: $(APPLICATION)
+		$(INSTALL) $(APPLICATION) $(IMG)
+
+clean:
+		$(CLEAN) *.o $(APPLICATION)
diff --git a/app/teste_heap/teste_heap.cc b/app/teste_heap/teste_heap.cc
new file mode 100644
index 0000000..5385311
--- /dev/null
+++ b/app/teste_heap/teste_heap.cc
@@ -0,0 +1,77 @@
+#include <utility/ostream.h>
+
+extern "C" char _end;
+
+using namespace EPOS;
+
+OStream cout;
+
+
+static const unsigned int HEAP_SIZE = Traits<Machine>::HEAP_SIZE;
+static const unsigned int STACK_SIZE = Traits<Machine>::STACK_SIZE;
+
+// Empty class used to allocate something
+class TestClass {
+};
+
+/*
+ * @Brief Test 1 can be used without modifications on any system class, but relies on some
+ * assumptions that can be changed futurelly.
+ *
+ * @Param char * ptr: A poiter to the first object allocated in the heap.
+ */
+void test_1(char * ptr) {
+    cout << "Starting Test 1" << endl;
+
+    void * data_end = reinterpret_cast<void *> (&_end);     // Get the pointer to the end of the data segment
+    void * heap_pointer = reinterpret_cast<void *> (ptr - HEAP_SIZE + 8);   // Subtract HEAP_SIZE because of top-down allocator aproach, and compensate 8 bytes subtracted during allocation
+    void * heap_with_stack = reinterpret_cast<void *> (ptr - HEAP_SIZE + 8 - STACK_SIZE);   // Same as before but subtract stack allocated by SETUP
+
+    assert(data_end != heap_pointer);
+    assert(data_end != heap_with_stack);
+
+    cout << "heap pointer address" << heap_pointer << endl;
+    cout << "heap pointer with stack address " << heap_with_stack << endl;
+    cout << "end of data segment " << data_end << endl;
+    cout << "End of Test 1" << endl;
+    cout << endl;
+}
+
+/*
+ * @Brief Test 2 may be a little more robust, but relies on some very specific implementation details
+ * and needs to add the start_address variable on the Heap class.
+ *
+ * @Param char * ptr: A poiter to some object allocated in the heap.
+ */
+void test_2(char * ptr) {
+    cout << "Starting Test 2" << endl;
+
+    int * addr = reinterpret_cast<int *>(ptr) - 2;  // Compensate 2 integers subtracted during allocation
+    S::U::Heap * heap = reinterpret_cast<S::U::Heap *> (*addr); // Figure out heap like in Heap::typed_free
+
+    void * data_end = reinterpret_cast<void *> (&_end);
+    void * heap_pointer = reinterpret_cast<void *> (heap->start_address);  // Using a new variable created at the class Heap
+    void * heap_with_stack = reinterpret_cast<void *> (reinterpret_cast<char *>(heap->start_address) - STACK_SIZE);
+
+    assert(data_end != heap_pointer);
+    assert(data_end != heap_with_stack);
+
+    cout << "heap pointer address " << heap_pointer << endl;
+    cout << "heap pointer with stack address " << heap_with_stack << endl;
+    cout << "end of data segment " << data_end << endl;
+    cout << "End of Test 2" << endl;
+    cout << endl;
+}
+
+
+int main()
+{
+    // alloc some data on application heap
+    TestClass * ptr = new TestClass();
+
+    // Test using two different methods
+    test_1((char *) ptr);
+    test_2((char *) ptr);
+
+    return 0;
+}
diff --git a/app/teste_heap/teste_heap_traits.h b/app/teste_heap/teste_heap_traits.h
new file mode 100644
index 0000000..98e6fcd
--- /dev/null
+++ b/app/teste_heap/teste_heap_traits.h
@@ -0,0 +1,154 @@
+#ifndef __traits_h
+#define __traits_h
+
+#include <system/config.h>
+
+__BEGIN_SYS
+
+// Build
+template<> struct Traits<Build>: public Traits_Tokens
+{
+    // Basic configuration
+    static const unsigned int MODE = LIBRARY;
+    static const unsigned int ARCHITECTURE = ARMv7;
+    static const unsigned int MACHINE = Cortex;
+    static const unsigned int MODEL = Raspberry_Pi3;
+    static const unsigned int CPUS = 1;
+    static const unsigned int NODES = 1; // (> 1 => NETWORKING)
+    static const unsigned int EXPECTED_SIMULATION_TIME = 60; // s (0 => not simulated)
+
+    // Default flags
+    static const bool enabled = true;
+    static const bool monitored = false;
+    static const bool debugged = true;
+    static const bool hysterically_debugged = false;
+
+    // Default aspects
+    typedef ALIST<> ASPECTS;
+};
+
+
+// Utilities
+template<> struct Traits<Debug>: public Traits<Build>
+{
+    static const bool error   = true;
+    static const bool warning = true;
+    static const bool info    = false;
+    static const bool trace   = false;
+};
+
+template<> struct Traits<Lists>: public Traits<Build>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+template<> struct Traits<Spin>: public Traits<Build>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+template<> struct Traits<Heaps>: public Traits<Build>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+template<> struct Traits<Observers>: public Traits<Build>
+{
+    // Some observed objects are created before initializing the Display
+    // Enabling debug may cause trouble in some Machines
+    static const bool debugged = false;
+};
+
+
+// System Parts (mostly to fine control debugging)
+template<> struct Traits<Boot>: public Traits<Build>
+{
+};
+
+template<> struct Traits<Setup>: public Traits<Build>
+{
+};
+
+template<> struct Traits<Init>: public Traits<Build>
+{
+};
+
+template<> struct Traits<Framework>: public Traits<Build>
+{
+};
+
+template<> struct Traits<Aspect>: public Traits<Build>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+
+__END_SYS
+
+// Mediators
+#include __ARCHITECTURE_TRAITS_H
+#include __MACHINE_TRAITS_H
+
+__BEGIN_SYS
+
+
+// API Components
+template<> struct Traits<Application>: public Traits<Build>
+{
+    static const unsigned int STACK_SIZE = Traits<Machine>::STACK_SIZE;
+    static const unsigned int HEAP_SIZE = Traits<Machine>::HEAP_SIZE;
+    static const unsigned int MAX_THREADS = Traits<Machine>::MAX_THREADS;
+};
+
+template<> struct Traits<System>: public Traits<Build>
+{
+    static const unsigned int mode = Traits<Build>::MODE;
+    static const bool multithread = (Traits<Build>::CPUS > 1) || (Traits<Application>::MAX_THREADS > 1);
+    static const bool multitask = (mode != Traits<Build>::LIBRARY);
+    static const bool multicore = (Traits<Build>::CPUS > 1) && multithread;
+    static const bool multiheap = multitask || Traits<Scratchpad>::enabled;
+
+    static const unsigned long LIFE_SPAN = 1 * YEAR; // s
+    static const unsigned int DUTY_CYCLE = 1000000; // ppm
+
+    static const bool reboot = true;
+
+    static const unsigned int STACK_SIZE = Traits<Machine>::STACK_SIZE;
+    static const unsigned int HEAP_SIZE = (Traits<Application>::MAX_THREADS + 1) * Traits<Application>::STACK_SIZE;
+};
+
+template<> struct Traits<Task>: public Traits<Build>
+{
+    static const bool enabled = Traits<System>::multitask;
+};
+
+template<> struct Traits<Thread>: public Traits<Build>
+{
+    static const bool enabled = Traits<System>::multithread;
+    static const bool smp = Traits<System>::multicore;
+    static const bool trace_idle = hysterically_debugged;
+    static const bool simulate_capacity = false;
+
+    static const bool preemptive = true;
+    static const unsigned int QUANTUM = 10000; // us
+};
+
+template<> struct Traits<Scheduler<Thread>>: public Traits<Build>
+{
+    static const bool debugged = Traits<Thread>::trace_idle || hysterically_debugged;
+};
+
+template<> struct Traits<Synchronizer>: public Traits<Build>
+{
+    static const bool enabled = Traits<System>::multithread;
+};
+
+template<> struct Traits<Alarm>: public Traits<Build>
+{
+    static const bool visible = hysterically_debugged;
+};
+
+
+__END_SYS
+
+#endif
diff --git a/dockepos b/dockepos
new file mode 100755
index 0000000..2095f14
--- /dev/null
+++ b/dockepos
@@ -0,0 +1,10 @@
+#! /bin/bash
+
+docker run -it --rm \
+-v $(pwd):/code \
+-v "/tmp/.X11-unix:/tmp/.X11-unix:rw" \
+-e "DISPLAY" \
+-e 'QEMU_AUDIO_DRV=none' \
+-u $(id -u):$(id -g) \
+epos_docker/dockepos \
+$@
diff --git a/include/real-time.h b/include/real-time.h
index 4f53875..52b959d 100644
--- a/include/real-time.h
+++ b/include/real-time.h
@@ -25,11 +25,11 @@ typedef Thread Aperiodic_Thread;
 class Periodic_Thread: public Thread
 {
 public:
-    enum {
-        SAME    = Real_Time_Scheduler_Common::SAME,
-        NOW     = Real_Time_Scheduler_Common::NOW,
-        UNKNOWN = Real_Time_Scheduler_Common::UNKNOWN,
-        ANY     = Real_Time_Scheduler_Common::ANY
+    enum : unsigned int {
+        SAME    = 0,
+        NOW     = 0,
+        UNKNOWN = 0,
+        ANY     = -1U
     };
 
 protected:
@@ -89,6 +89,11 @@ public:
             _state = conf.state;
     }
 
+    template<typename ... Tn> 
+    Periodic_Thread(const Microsecond & p, const Microsecond & d, int (* entry)(Tn ...), Tn ... an) 
+    : Thread(Thread::Configuration(SUSPENDED, Criterion(d, p)), entry, an ...),
+      _semaphore(0), _handler(&_semaphore, this), _alarm(p, &_handler, INFINITE) { resume(); }
+
     const Microsecond & period() const { return _alarm.period(); }
     void period(const Microsecond & p) { _alarm.period(p); }
 
diff --git a/include/scheduler.h b/include/scheduler.h
index 99bfd36..eb25924 100644
--- a/include/scheduler.h
+++ b/include/scheduler.h
@@ -145,6 +145,27 @@ public:
     FCFS(int p = NORMAL, Tn & ... an);
 };
 
+class DeadlineMonotonic: public Priority
+{
+public:
+    static const bool timed = false;
+    static const bool dynamic = false;
+    static const bool preemptive = true;
+
+public:
+    DeadlineMonotonic(int i): Priority(i), _deadline(0), _period(0), _capacity(0) {}
+    DeadlineMonotonic(int i, const Microsecond & d, const Microsecond & p, const Microsecond & c)
+    : Priority(d), _deadline(d), _period(p), _capacity(c) {}
+
+    const Microsecond period() {return _period;}
+    void period(const Microsecond & p) {_period = p;}
+
+public:
+    Microsecond _deadline;
+    Microsecond _period;
+    Microsecond _capacity;
+};
+
 __END_SYS
 
 #endif
diff --git a/include/system.h b/include/system.h
index 5215ef1..161de6a 100644
--- a/include/system.h
+++ b/include/system.h
@@ -20,7 +20,8 @@ private:
     static void init();
 
 private:
-    static char _preheap[sizeof(Heap)];
+    static char _preheap[(Traits<System>::multiheap ? sizeof(Segment) : 0) + sizeof(Heap)];
+    static Segment * _heap_segment;
     static Heap * _heap;
 };
 
diff --git a/include/time.h b/include/time.h
index 8608ce0..fcf285b 100644
--- a/include/time.h
+++ b/include/time.h
@@ -34,6 +34,7 @@ class Alarm
     friend class Alarm_Chronometer;             // for elapsed()
     friend class Periodic_Thread;               // for ticks(), times(), and elapsed()
     friend class FCFS;                          // for ticks() and elapsed()
+    friend class DeadlineMonotonic;
 
 private:
     typedef Timer_Common::Tick Tick;
diff --git a/include/utility/heap.h b/include/utility/heap.h
index 3a786c0..69dd55e 100644
--- a/include/utility/heap.h
+++ b/include/utility/heap.h
@@ -20,6 +20,8 @@ public:
     using Grouping_List<char>::size;
     using Grouping_List<char>::grouped_size;
 
+    void * start_address;   // used for testing
+
     Heap() {
         db<Init, Heaps>(TRC) << "Heap() => " << this << endl;
     }
@@ -27,6 +29,7 @@ public:
     Heap(void * addr, unsigned int bytes) {
         db<Init, Heaps>(TRC) << "Heap(addr=" << addr << ",bytes=" << bytes << ") => " << this << endl;
 
+        start_address = addr;
         free(addr, bytes);
     }
 
diff --git a/makedefs b/makedefs
index 09760e0..44088c8 100644
--- a/makedefs
+++ b/makedefs
@@ -93,8 +93,8 @@ UUID                    = $(shell cat /proc/sys/kernel/random/uuid | sed 's/-//g
 
 # Compiler prefixes
 ia32_COMP_PREFIX	:= /usr/bin/x86_64-linux-gnu-
-armv7_COMP_PREFIX	:= /usr/bin/arm-none-eabi-
-armv8_COMP_PREFIX	:= /usr/bin/arm-none-eabi-
+armv7_COMP_PREFIX	:= /usr/local/arm/gcc-7.2.0/bin/arm-
+armv8_COMP_PREFIX	:= /usr/local/arm/gcc-7.2.0/bin/arm-
 rv32_COMP_PREFIX	:= /usr/local/rv32/bin/riscv32-unknown-linux-gnu-
 rv64_COMP_PREFIX	:= /usr/bin/riscv64-linux-gnu-
 COMP_PREFIX		= $($(ARCH)_COMP_PREFIX)
@@ -141,7 +141,7 @@ cortex_CC_FLAGS		:= -mcpu=cortex-a53 -mfloat-abi=hard -mfpu=vfp
 cortex_AS_FLAGS		:= -mcpu=cortex-a53
 cortex_LD_FLAGS		:=
 cortex_EMULATOR		= qemu-system-aarch64 -M raspi2 -cpu cortex-a53 -smp 4 -m 1G -serial null -serial mon:stdio -nographic -no-reboot -device loader,file=$(APPLICATION).img,addr=$(IMAGE_ADDR),force-raw=on -kernel 
-cortex_DEBUGGER		:= gdb
+cortex_DEBUGGER		:= gdb-multiarch
 cortex_FLASHER		= $(TLS)/eposflash/eposflash-$(MMOD) -d /dev/ttyACM0 -f
 cortex_MAGIC		:= --nmagic
 cortex_CODE_NAME	:= .init
@@ -315,7 +315,7 @@ TEE		:= tee
 ifndef DISPLAY
 TERM        := sh -c
 else
-TERM        := konsole -e
+TERM        := xterm -e
 endif
 
 TOUCH		:= touch
diff --git a/src/init/init_application.cc b/src/init/init_application.cc
index 53815ae..e73b955 100644
--- a/src/init/init_application.cc
+++ b/src/init/init_application.cc
@@ -22,10 +22,18 @@ public:
         // Initialize Application's heap
         db<Init>(INF) << "Initializing application's heap: " << endl;
         if(Traits<System>::multiheap) { // heap in data segment arranged by SETUP
-            char * heap = (MMU::align_page(&_end) >= CPU::Log_Addr(Memory_Map::APP_DATA)) ? MMU::align_page(&_end) : CPU::Log_Addr(Memory_Map::APP_DATA); // ld is eliminating the data segment in some compilations, particularly for RISC-V, and placing _end in the code segment
-            if(Traits<Build>::MODE != Traits<Build>::KERNEL) // if not a kernel, then use the stack allocated by SETUP, otherwise make that part of the heap
-                heap += MMU::align_page(Traits<Application>::STACK_SIZE);
-            Application::_heap = new (&Application::_preheap[0]) Heap(heap, HEAP_SIZE);
+            // Dinamically alocated pointers
+            Segment * tmp_segm = reinterpret_cast<Segment *>(&System::_preheap[0]);
+            Heap * tmp_heap = reinterpret_cast<Heap *>(&System::_preheap[sizeof(Segment)]);
+
+            // Creates a new application segment with the appropriate flags
+            Application::_heap_segment = new (tmp_segm) Segment(HEAP_SIZE, Segment::Flags::APP);
+
+            // Attaches the new segment with a address space
+            Address_Space::Log_Addr address = Address_Space(MMU::current()).attach(Application::_heap_segment);
+
+            // Creates a heap on the new segment
+            Application::_heap = new(tmp_heap) Heap(address, Application::_heap_segment->size());
         } else
             for(unsigned int frames = MMU::allocable(); frames; frames = MMU::allocable())
                 System::_heap->free(MMU::alloc(frames), frames * sizeof(MMU::Page));
diff --git a/src/system/application_scaffold.cc b/src/system/application_scaffold.cc
index 89ad5ea..94eacd9 100644
--- a/src/system/application_scaffold.cc
+++ b/src/system/application_scaffold.cc
@@ -6,6 +6,7 @@ __BEGIN_SYS
 
 // Application class attributes
 char Application::_preheap[];
+Segment * Application::_heap_segment;
 Heap * Application::_heap;
 
 __END_SYS
